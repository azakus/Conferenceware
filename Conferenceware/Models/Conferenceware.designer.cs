#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Conferenceware.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Conferenceware")]
	public partial class ConferencewareDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttendee(Attendee instance);
    partial void UpdateAttendee(Attendee instance);
    partial void DeleteAttendee(Attendee instance);
    partial void InsertTShirtSize(TShirtSize instance);
    partial void UpdateTShirtSize(TShirtSize instance);
    partial void DeleteTShirtSize(TShirtSize instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventsAttendee(EventsAttendee instance);
    partial void UpdateEventsAttendee(EventsAttendee instance);
    partial void DeleteEventsAttendee(EventsAttendee instance);
    partial void InsertEventsSpeaker(EventsSpeaker instance);
    partial void UpdateEventsSpeaker(EventsSpeaker instance);
    partial void DeleteEventsSpeaker(EventsSpeaker instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertPeople(People instance);
    partial void UpdatePeople(People instance);
    partial void DeletePeople(People instance);
    partial void InsertSpeaker(Speaker instance);
    partial void UpdateSpeaker(Speaker instance);
    partial void DeleteSpeaker(Speaker instance);
    partial void InsertTimeSlot(TimeSlot instance);
    partial void UpdateTimeSlot(TimeSlot instance);
    partial void DeleteTimeSlot(TimeSlot instance);
    #endregion
		
		public ConferencewareDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConferencewareConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ConferencewareDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConferencewareDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConferencewareDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConferencewareDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attendee> Attendees
		{
			get
			{
				return this.GetTable<Attendee>();
			}
		}
		
		public System.Data.Linq.Table<TShirtSize> TShirtSizes
		{
			get
			{
				return this.GetTable<TShirtSize>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventsAttendee> EventsAttendees
		{
			get
			{
				return this.GetTable<EventsAttendee>();
			}
		}
		
		public System.Data.Linq.Table<EventsSpeaker> EventsSpeakers
		{
			get
			{
				return this.GetTable<EventsSpeaker>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<People> Peoples
		{
			get
			{
				return this.GetTable<People>();
			}
		}
		
		public System.Data.Linq.Table<Speaker> Speakers
		{
			get
			{
				return this.GetTable<Speaker>();
			}
		}
		
		public System.Data.Linq.Table<TimeSlot> TimeSlots
		{
			get
			{
				return this.GetTable<TimeSlot>();
			}
		}
	}
	
	[Table(Name="dbo.Attendees")]
	public partial class Attendee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _person_id;
		
		private int _food_choice_id;
		
		private int _tshirt_id;
		
		private EntitySet<EventsAttendee> _EventsAttendees;
		
		private EntityRef<TShirtSize> _TShirtSize;
		
		private EntityRef<Food> _Food;
		
		private EntityRef<People> _People;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onperson_idChanging(int value);
    partial void Onperson_idChanged();
    partial void Onfood_choice_idChanging(int value);
    partial void Onfood_choice_idChanged();
    partial void Ontshirt_idChanging(int value);
    partial void Ontshirt_idChanged();
    #endregion
		
		public Attendee()
		{
			this._EventsAttendees = new EntitySet<EventsAttendee>(new Action<EventsAttendee>(this.attach_EventsAttendees), new Action<EventsAttendee>(this.detach_EventsAttendees));
			this._TShirtSize = default(EntityRef<TShirtSize>);
			this._Food = default(EntityRef<Food>);
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[Column(Storage="_person_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int person_id
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onperson_idChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("person_id");
					this.Onperson_idChanged();
				}
			}
		}
		
		[Column(Storage="_food_choice_id", DbType="Int NOT NULL")]
		public int food_choice_id
		{
			get
			{
				return this._food_choice_id;
			}
			set
			{
				if ((this._food_choice_id != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfood_choice_idChanging(value);
					this.SendPropertyChanging();
					this._food_choice_id = value;
					this.SendPropertyChanged("food_choice_id");
					this.Onfood_choice_idChanged();
				}
			}
		}
		
		[Column(Storage="_tshirt_id", DbType="Int NOT NULL")]
		public int tshirt_id
		{
			get
			{
				return this._tshirt_id;
			}
			set
			{
				if ((this._tshirt_id != value))
				{
					if (this._TShirtSize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontshirt_idChanging(value);
					this.SendPropertyChanging();
					this._tshirt_id = value;
					this.SendPropertyChanged("tshirt_id");
					this.Ontshirt_idChanged();
				}
			}
		}
		
		[Association(Name="Attendee_EventsAttendee", Storage="_EventsAttendees", ThisKey="person_id", OtherKey="attendee_id")]
		public EntitySet<EventsAttendee> EventsAttendees
		{
			get
			{
				return this._EventsAttendees;
			}
			set
			{
				this._EventsAttendees.Assign(value);
			}
		}
		
		[Association(Name="TShirtSize_Attendee", Storage="_TShirtSize", ThisKey="tshirt_id", OtherKey="id", IsForeignKey=true)]
		public TShirtSize TShirtSize
		{
			get
			{
				return this._TShirtSize.Entity;
			}
			set
			{
				TShirtSize previousValue = this._TShirtSize.Entity;
				if (((previousValue != value) 
							|| (this._TShirtSize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TShirtSize.Entity = null;
						previousValue.Attendees.Remove(this);
					}
					this._TShirtSize.Entity = value;
					if ((value != null))
					{
						value.Attendees.Add(this);
						this._tshirt_id = value.id;
					}
					else
					{
						this._tshirt_id = default(int);
					}
					this.SendPropertyChanged("TShirtSize");
				}
			}
		}
		
		[Association(Name="Food_Attendee", Storage="_Food", ThisKey="food_choice_id", OtherKey="id", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.Attendees.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.Attendees.Add(this);
						this._food_choice_id = value.id;
					}
					else
					{
						this._food_choice_id = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		[Association(Name="People_Attendee", Storage="_People", ThisKey="person_id", OtherKey="id", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Attendee = null;
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Attendee = this;
						this._person_id = value.id;
					}
					else
					{
						this._person_id = default(int);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventsAttendees(EventsAttendee entity)
		{
			this.SendPropertyChanging();
			entity.Attendee = this;
		}
		
		private void detach_EventsAttendees(EventsAttendee entity)
		{
			this.SendPropertyChanging();
			entity.Attendee = null;
		}
	}
	
	[Table(Name="dbo.TShirtSizes")]
	public partial class TShirtSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Attendee> _Attendees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public TShirtSize()
		{
			this._Attendees = new EntitySet<Attendee>(new Action<Attendee>(this.attach_Attendees), new Action<Attendee>(this.detach_Attendees));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="TShirtSize_Attendee", Storage="_Attendees", ThisKey="id", OtherKey="tshirt_id")]
		public EntitySet<Attendee> Attendees
		{
			get
			{
				return this._Attendees;
			}
			set
			{
				this._Attendees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attendees(Attendee entity)
		{
			this.SendPropertyChanging();
			entity.TShirtSize = this;
		}
		
		private void detach_Attendees(Attendee entity)
		{
			this.SendPropertyChanging();
			entity.TShirtSize = null;
		}
	}
	
	[Table(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _description;
		
		private int _max_attendees;
		
		private int _timeslot_id;
		
		private int _location_id;
		
		private EntitySet<EventsAttendee> _EventsAttendees;
		
		private EntitySet<EventsSpeaker> _EventsSpeakers;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<TimeSlot> _TimeSlot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onmax_attendeesChanging(int value);
    partial void Onmax_attendeesChanged();
    partial void Ontimeslot_idChanging(int value);
    partial void Ontimeslot_idChanged();
    partial void Onlocation_idChanging(int value);
    partial void Onlocation_idChanged();
    #endregion
		
		public Event()
		{
			this._EventsAttendees = new EntitySet<EventsAttendee>(new Action<EventsAttendee>(this.attach_EventsAttendees), new Action<EventsAttendee>(this.detach_EventsAttendees));
			this._EventsSpeakers = new EntitySet<EventsSpeaker>(new Action<EventsSpeaker>(this.attach_EventsSpeakers), new Action<EventsSpeaker>(this.detach_EventsSpeakers));
			this._Location = default(EntityRef<Location>);
			this._TimeSlot = default(EntityRef<TimeSlot>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_max_attendees", DbType="Int NOT NULL")]
		public int max_attendees
		{
			get
			{
				return this._max_attendees;
			}
			set
			{
				if ((this._max_attendees != value))
				{
					this.Onmax_attendeesChanging(value);
					this.SendPropertyChanging();
					this._max_attendees = value;
					this.SendPropertyChanged("max_attendees");
					this.Onmax_attendeesChanged();
				}
			}
		}
		
		[Column(Storage="_timeslot_id", DbType="Int NOT NULL")]
		public int timeslot_id
		{
			get
			{
				return this._timeslot_id;
			}
			set
			{
				if ((this._timeslot_id != value))
				{
					if (this._TimeSlot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontimeslot_idChanging(value);
					this.SendPropertyChanging();
					this._timeslot_id = value;
					this.SendPropertyChanged("timeslot_id");
					this.Ontimeslot_idChanged();
				}
			}
		}
		
		[Column(Storage="_location_id", DbType="Int NOT NULL")]
		public int location_id
		{
			get
			{
				return this._location_id;
			}
			set
			{
				if ((this._location_id != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlocation_idChanging(value);
					this.SendPropertyChanging();
					this._location_id = value;
					this.SendPropertyChanged("location_id");
					this.Onlocation_idChanged();
				}
			}
		}
		
		[Association(Name="Event_EventsAttendee", Storage="_EventsAttendees", ThisKey="id", OtherKey="event_id")]
		public EntitySet<EventsAttendee> EventsAttendees
		{
			get
			{
				return this._EventsAttendees;
			}
			set
			{
				this._EventsAttendees.Assign(value);
			}
		}
		
		[Association(Name="Event_EventsSpeaker", Storage="_EventsSpeakers", ThisKey="id", OtherKey="event_id")]
		public EntitySet<EventsSpeaker> EventsSpeakers
		{
			get
			{
				return this._EventsSpeakers;
			}
			set
			{
				this._EventsSpeakers.Assign(value);
			}
		}
		
		[Association(Name="Location_Event", Storage="_Location", ThisKey="location_id", OtherKey="id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._location_id = value.id;
					}
					else
					{
						this._location_id = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="TimeSlot_Event", Storage="_TimeSlot", ThisKey="timeslot_id", OtherKey="id", IsForeignKey=true)]
		public TimeSlot TimeSlot
		{
			get
			{
				return this._TimeSlot.Entity;
			}
			set
			{
				TimeSlot previousValue = this._TimeSlot.Entity;
				if (((previousValue != value) 
							|| (this._TimeSlot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeSlot.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._TimeSlot.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._timeslot_id = value.id;
					}
					else
					{
						this._timeslot_id = default(int);
					}
					this.SendPropertyChanged("TimeSlot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventsAttendees(EventsAttendee entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventsAttendees(EventsAttendee entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventsSpeakers(EventsSpeaker entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventsSpeakers(EventsSpeaker entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[Table(Name="dbo.EventsAttendees")]
	public partial class EventsAttendee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _event_id;
		
		private int _attendee_id;
		
		private EntityRef<Attendee> _Attendee;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onevent_idChanging(int value);
    partial void Onevent_idChanged();
    partial void Onattendee_idChanging(int value);
    partial void Onattendee_idChanged();
    #endregion
		
		public EventsAttendee()
		{
			this._Attendee = default(EntityRef<Attendee>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[Column(Storage="_event_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int event_id
		{
			get
			{
				return this._event_id;
			}
			set
			{
				if ((this._event_id != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onevent_idChanging(value);
					this.SendPropertyChanging();
					this._event_id = value;
					this.SendPropertyChanged("event_id");
					this.Onevent_idChanged();
				}
			}
		}
		
		[Column(Storage="_attendee_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int attendee_id
		{
			get
			{
				return this._attendee_id;
			}
			set
			{
				if ((this._attendee_id != value))
				{
					if (this._Attendee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onattendee_idChanging(value);
					this.SendPropertyChanging();
					this._attendee_id = value;
					this.SendPropertyChanged("attendee_id");
					this.Onattendee_idChanged();
				}
			}
		}
		
		[Association(Name="Attendee_EventsAttendee", Storage="_Attendee", ThisKey="attendee_id", OtherKey="person_id", IsForeignKey=true)]
		public Attendee Attendee
		{
			get
			{
				return this._Attendee.Entity;
			}
			set
			{
				Attendee previousValue = this._Attendee.Entity;
				if (((previousValue != value) 
							|| (this._Attendee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attendee.Entity = null;
						previousValue.EventsAttendees.Remove(this);
					}
					this._Attendee.Entity = value;
					if ((value != null))
					{
						value.EventsAttendees.Add(this);
						this._attendee_id = value.person_id;
					}
					else
					{
						this._attendee_id = default(int);
					}
					this.SendPropertyChanged("Attendee");
				}
			}
		}
		
		[Association(Name="Event_EventsAttendee", Storage="_Event", ThisKey="event_id", OtherKey="id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventsAttendees.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventsAttendees.Add(this);
						this._event_id = value.id;
					}
					else
					{
						this._event_id = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EventsSpeakers")]
	public partial class EventsSpeaker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _event_id;
		
		private int _speaker_id;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Speaker> _Speaker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onevent_idChanging(int value);
    partial void Onevent_idChanged();
    partial void Onspeaker_idChanging(int value);
    partial void Onspeaker_idChanged();
    #endregion
		
		public EventsSpeaker()
		{
			this._Event = default(EntityRef<Event>);
			this._Speaker = default(EntityRef<Speaker>);
			OnCreated();
		}
		
		[Column(Storage="_event_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int event_id
		{
			get
			{
				return this._event_id;
			}
			set
			{
				if ((this._event_id != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onevent_idChanging(value);
					this.SendPropertyChanging();
					this._event_id = value;
					this.SendPropertyChanged("event_id");
					this.Onevent_idChanged();
				}
			}
		}
		
		[Column(Storage="_speaker_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int speaker_id
		{
			get
			{
				return this._speaker_id;
			}
			set
			{
				if ((this._speaker_id != value))
				{
					if (this._Speaker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onspeaker_idChanging(value);
					this.SendPropertyChanging();
					this._speaker_id = value;
					this.SendPropertyChanged("speaker_id");
					this.Onspeaker_idChanged();
				}
			}
		}
		
		[Association(Name="Event_EventsSpeaker", Storage="_Event", ThisKey="event_id", OtherKey="id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventsSpeakers.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventsSpeakers.Add(this);
						this._event_id = value.id;
					}
					else
					{
						this._event_id = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="Speaker_EventsSpeaker", Storage="_Speaker", ThisKey="speaker_id", OtherKey="person_id", IsForeignKey=true)]
		public Speaker Speaker
		{
			get
			{
				return this._Speaker.Entity;
			}
			set
			{
				Speaker previousValue = this._Speaker.Entity;
				if (((previousValue != value) 
							|| (this._Speaker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speaker.Entity = null;
						previousValue.EventsSpeakers.Remove(this);
					}
					this._Speaker.Entity = value;
					if ((value != null))
					{
						value.EventsSpeakers.Add(this);
						this._speaker_id = value.person_id;
					}
					else
					{
						this._speaker_id = default(int);
					}
					this.SendPropertyChanged("Speaker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Foods")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Attendee> _Attendees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Food()
		{
			this._Attendees = new EntitySet<Attendee>(new Action<Attendee>(this.attach_Attendees), new Action<Attendee>(this.detach_Attendees));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="Food_Attendee", Storage="_Attendees", ThisKey="id", OtherKey="food_choice_id")]
		public EntitySet<Attendee> Attendees
		{
			get
			{
				return this._Attendees;
			}
			set
			{
				this._Attendees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attendees(Attendee entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_Attendees(Attendee entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[Table(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _max_capacity;
		
		private string _building_name;
		
		private string _room_number;
		
		private string _notes;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onmax_capacityChanging(int value);
    partial void Onmax_capacityChanged();
    partial void Onbuilding_nameChanging(string value);
    partial void Onbuilding_nameChanged();
    partial void Onroom_numberChanging(string value);
    partial void Onroom_numberChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    #endregion
		
		public Location()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_max_capacity", DbType="Int NOT NULL")]
		public int max_capacity
		{
			get
			{
				return this._max_capacity;
			}
			set
			{
				if ((this._max_capacity != value))
				{
					this.Onmax_capacityChanging(value);
					this.SendPropertyChanging();
					this._max_capacity = value;
					this.SendPropertyChanged("max_capacity");
					this.Onmax_capacityChanged();
				}
			}
		}
		
		[Column(Storage="_building_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string building_name
		{
			get
			{
				return this._building_name;
			}
			set
			{
				if ((this._building_name != value))
				{
					this.Onbuilding_nameChanging(value);
					this.SendPropertyChanging();
					this._building_name = value;
					this.SendPropertyChanged("building_name");
					this.Onbuilding_nameChanged();
				}
			}
		}
		
		[Column(Storage="_room_number", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string room_number
		{
			get
			{
				return this._room_number;
			}
			set
			{
				if ((this._room_number != value))
				{
					this.Onroom_numberChanging(value);
					this.SendPropertyChanging();
					this._room_number = value;
					this.SendPropertyChanged("room_number");
					this.Onroom_numberChanged();
				}
			}
		}
		
		[Column(Storage="_notes", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[Association(Name="Location_Event", Storage="_Events", ThisKey="id", OtherKey="location_id")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[Table(Name="dbo.People")]
	public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _email;
		
		private int _phone_number;
		
		private EntityRef<Attendee> _Attendee;
		
		private EntityRef<Speaker> _Speaker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onphone_numberChanging(int value);
    partial void Onphone_numberChanged();
    #endregion
		
		public People()
		{
			this._Attendee = default(EntityRef<Attendee>);
			this._Speaker = default(EntityRef<Speaker>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_phone_number", DbType="Int NOT NULL")]
		public int phone_number
		{
			get
			{
				return this._phone_number;
			}
			set
			{
				if ((this._phone_number != value))
				{
					this.Onphone_numberChanging(value);
					this.SendPropertyChanging();
					this._phone_number = value;
					this.SendPropertyChanged("phone_number");
					this.Onphone_numberChanged();
				}
			}
		}
		
		[Association(Name="People_Attendee", Storage="_Attendee", ThisKey="id", OtherKey="person_id", IsUnique=true, IsForeignKey=false)]
		public Attendee Attendee
		{
			get
			{
				return this._Attendee.Entity;
			}
			set
			{
				Attendee previousValue = this._Attendee.Entity;
				if (((previousValue != value) 
							|| (this._Attendee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attendee.Entity = null;
						previousValue.People = null;
					}
					this._Attendee.Entity = value;
					if ((value != null))
					{
						value.People = this;
					}
					this.SendPropertyChanged("Attendee");
				}
			}
		}
		
		[Association(Name="People_Speaker", Storage="_Speaker", ThisKey="id", OtherKey="person_id", IsUnique=true, IsForeignKey=false)]
		public Speaker Speaker
		{
			get
			{
				return this._Speaker.Entity;
			}
			set
			{
				Speaker previousValue = this._Speaker.Entity;
				if (((previousValue != value) 
							|| (this._Speaker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speaker.Entity = null;
						previousValue.People = null;
					}
					this._Speaker.Entity = value;
					if ((value != null))
					{
						value.People = this;
					}
					this.SendPropertyChanged("Speaker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Speakers")]
	public partial class Speaker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _person_id;
		
		private EntitySet<EventsSpeaker> _EventsSpeakers;
		
		private EntityRef<People> _People;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onperson_idChanging(int value);
    partial void Onperson_idChanged();
    #endregion
		
		public Speaker()
		{
			this._EventsSpeakers = new EntitySet<EventsSpeaker>(new Action<EventsSpeaker>(this.attach_EventsSpeakers), new Action<EventsSpeaker>(this.detach_EventsSpeakers));
			this._People = default(EntityRef<People>);
			OnCreated();
		}
		
		[Column(Storage="_person_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int person_id
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					if (this._People.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onperson_idChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("person_id");
					this.Onperson_idChanged();
				}
			}
		}
		
		[Association(Name="Speaker_EventsSpeaker", Storage="_EventsSpeakers", ThisKey="person_id", OtherKey="speaker_id")]
		public EntitySet<EventsSpeaker> EventsSpeakers
		{
			get
			{
				return this._EventsSpeakers;
			}
			set
			{
				this._EventsSpeakers.Assign(value);
			}
		}
		
		[Association(Name="People_Speaker", Storage="_People", ThisKey="person_id", OtherKey="id", IsForeignKey=true)]
		public People People
		{
			get
			{
				return this._People.Entity;
			}
			set
			{
				People previousValue = this._People.Entity;
				if (((previousValue != value) 
							|| (this._People.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._People.Entity = null;
						previousValue.Speaker = null;
					}
					this._People.Entity = value;
					if ((value != null))
					{
						value.Speaker = this;
						this._person_id = value.id;
					}
					else
					{
						this._person_id = default(int);
					}
					this.SendPropertyChanged("People");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventsSpeakers(EventsSpeaker entity)
		{
			this.SendPropertyChanging();
			entity.Speaker = this;
		}
		
		private void detach_EventsSpeakers(EventsSpeaker entity)
		{
			this.SendPropertyChanging();
			entity.Speaker = null;
		}
	}
	
	[Table(Name="dbo.TimeSlots")]
	public partial class TimeSlot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _start_time;
		
		private System.DateTime _end_time;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstart_timeChanging(System.DateTime value);
    partial void Onstart_timeChanged();
    partial void Onend_timeChanging(System.DateTime value);
    partial void Onend_timeChanged();
    #endregion
		
		public TimeSlot()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_start_time", DbType="DateTime NOT NULL")]
		public System.DateTime start_time
		{
			get
			{
				return this._start_time;
			}
			set
			{
				if ((this._start_time != value))
				{
					this.Onstart_timeChanging(value);
					this.SendPropertyChanging();
					this._start_time = value;
					this.SendPropertyChanged("start_time");
					this.Onstart_timeChanged();
				}
			}
		}
		
		[Column(Storage="_end_time", DbType="DateTime NOT NULL")]
		public System.DateTime end_time
		{
			get
			{
				return this._end_time;
			}
			set
			{
				if ((this._end_time != value))
				{
					this.Onend_timeChanging(value);
					this.SendPropertyChanging();
					this._end_time = value;
					this.SendPropertyChanged("end_time");
					this.Onend_timeChanged();
				}
			}
		}
		
		[Association(Name="TimeSlot_Event", Storage="_Events", ThisKey="id", OtherKey="timeslot_id")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlot = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlot = null;
		}
	}
}
#pragma warning restore 1591
